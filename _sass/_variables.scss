/*Colors*/

// Font Family

//Font Style



// Font Scale    e.g.
$h1: 2rem;    // 32px
$h2: 1.5rem;  // 24px
$h3: 1.25rem; // 20px
$h4: 1rem;    // 16px
$h5: .875rem; // 14px
$h6: .75rem;  // 12px

// Line Height, Maybe lh as class
$leading-solid: 1;
$leading-headline: 1.25;
$leading-text: 1.5;

//Spacing Scale
$space-xs: .25rem;
$space-s: .5rem;
$space-m: 1rem;
$space-l: 2rem;
$space-xl: 4rem;
$space-xxl: 8rem;
$space-xxxl: 16rem;

//Colors, could also be applied as pure tone with opacities, like google mdl.
// so example: .b10{color:$000;opacity:0.1;}
$b10:rgba(0,0,0,0.1);
$b20:rgba(0,0,0,0.2);
$b30:rgba(0,0,0,0.3);
$b40:rgba(0,0,0,0.4);
$b50:rgba(0,0,0,0.5);
$b60:rgba(0,0,0,0.6);
$b70:rgba(0,0,0,0.7);
$b80:rgba(0,0,0,0.8);
$b90:rgba(0,0,0,0.9);
$black:rgb(0,0,0);

$w10:rgba(255,255,255,0.1);
$w20:rgba(255,255,255,0.2);
$w30:rgba(255,255,255,0.3);
$w40:rgba(255,255,255,0.4);
$w50:rgba(255,255,255,0.5);
$w60:rgba(255,255,255,0.6);
$w70:rgba(255,255,255,0.7);
$w80:rgba(255,255,255,0.8);
$w90:rgba(255,255,255,0.9);
$white:rgb(255,255,255);


// Our variables
$base-font-family: -apple-system, BlinkMacSystemFont,
  "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell",
  "Fira Sans", "Droid Sans", "Helvetica Neue",
  sans-serif;
$base-font-size:   16px;
$small-font-size:  $base-font-size * 0.875;
$base-line-height: 1.5;

$spacing-unit:     1.5rem;

$text-color:       #000;
$background-color: #fdfdfd;
$brand-color:      #2a7ae2;

$grey-color:       #828282;
$grey-color-light: lighten($grey-color, 40%);
$grey-color-dark:  darken($grey-color, 25%);

// Add or remove breakpoints as you desire
// Incremental half-step powers of 16,
$breakpoints:(
s: 32em,
m: 48em,
l: 64em,
xl: 96em,
xxl: 128em,
);

@mixin breakpoint($size){
@each $breakpoint, $value in $breakpoints {
 @if $size == $breakpoint {
 @media screen and (min-width: map-get($breakpoints, $breakpoint)){
 @content;
 }
 }
}
}
// EXAMPLE
// body {
// @include breakpoint(tablet){
// font-size: 14px;
// };
// }

// Pixel-to-em calculator
@function em($target, $context: 16) {
  @return ($target / $context) * 1em;
}

// Enter in the pixel value you know, and it converts it into em
//.test-class-for-example {
//  width: em(400);
//}
